{% assign selected_variant = product.selected_or_first_available_variant %}

<style>
  .price-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 20px;
  }

  .sale-label {
    background-color: #e53e3e;
    color: white;
    padding: 4px 8px;
    font-size: 0.8rem;
    font-weight: bold;
    border-radius: 4px;
  }

  .original-price {
    text-decoration: line-through;
    color: #718096;
    font-size: 1rem;
  }

  .current-price {
    font-weight: bold;
    font-size: 1.8rem;
  }

  .carousel-container {
    position: relative;
    width: 100%;
    overflow: hidden;
    aspect-ratio: 1 / 1;
    max-height: 600px;
  }

  .carousel {
    display: flex;
    transition: transform 0.3s ease-in-out;
  }

  .carousel-item {
    flex: 0 0 100%;
    width: 100%;
  }

  .carousel-item img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(255, 255, 255, 0.8);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
  }

  .carousel-button:hover {
    background-color: rgba(255, 255, 255, 1);
  }

  .carousel-button-prev {
    left: 10px;
  }

  .carousel-button-next {
    right: 10px;
  }

  .thumbnail-carousel-container {
    position: relative;
    width: 100%;
    overflow: hidden;
    height: 100px;
    margin-top: 20px;
  }

  .thumbnail-carousel {
    display: flex;
    transition: transform 0.3s ease-in-out;
  }

  .thumbnail-item {
    flex: 0 0 25%;
    padding: 0 5px;
    cursor: pointer;
  }

  .thumbnail-item img {
    width: 100%;
    height: 100px;
    object-fit: cover;
    border: 2px solid transparent;
    border-radius: 4px;
  }

  .thumbnail-item.active img {
    border-color: #4a5568;
  }

  .thumbnail-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(255, 255, 255, 0.8);
    border: none;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
  }

  .thumbnail-button:hover {
    background-color: rgba(255, 255, 255, 1);
  }

  .thumbnail-button-prev {
    left: 5px;
  }

  .thumbnail-button-next {
    right: 5px;
  }

  .zoom-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: 1000;
  }

  .zoomed-image {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    max-width: 90%;
    max-height: 90%;
  }

  .zoom-button {
    position: absolute;
    bottom: 10px;
    right: 10px;
    background-color: rgba(255, 255, 255, 0.8);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 10;
  }

  .zoom-button:hover {
    background-color: rgba(255, 255, 255, 1);
  }

  .close-button {
    position: absolute;
    top: 20px;
    right: 20px;
    background-color: rgba(255, 255, 255, 0.8);
    border: none;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 1001;
  }

  .close-button:hover {
    background-color: rgba(255, 255, 255, 1);
  }
</style>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
  <div class="lg:grid lg:grid-cols-2 lg:gap-x-8 lg:items-start">
    <!-- Image carousels -->
    <div class="flex flex-col">
      <!-- Main carousel -->
      <div class="w-full mb-4 carousel-container">
        <div class="carousel" id="product-carousel">
          {% for media in product.media %}
            <div class="carousel-item" data-media-id="{{ media.id }}">
              <img src="{{ media | img_url: '800x800', crop: 'center' }}" alt="{{ media.alt | escape }}" class="w-full h-full object-contain rounded-lg" />
            </div>
          {% endfor %}
        </div>
        <button class="carousel-button carousel-button-prev" id="carousel-prev">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <button class="carousel-button carousel-button-next" id="carousel-next">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
        <button class="zoom-button" id="zoom-button">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
          </svg>
        </button>
      </div>
      
      <!-- Thumbnail carousel -->
      <div class="thumbnail-carousel-container">
        <div class="thumbnail-carousel" id="thumbnail-carousel">
          {% for media in product.media %}
            <div class="thumbnail-item{% if forloop.first %} active{% endif %}" data-media-id="{{ media.id }}">
              <img src="{{ media | img_url: '200x200', crop: 'center' }}" alt="{{ media.alt | escape }}" />
            </div>
          {% endfor %}
        </div>
        <button class="thumbnail-button thumbnail-button-prev" id="thumbnail-prev">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-4 h-4">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        <button class="thumbnail-button thumbnail-button-next" id="thumbnail-next">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-4 h-4">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Product info -->
    <div class="mt-10 px-4 sm:px-0 sm:mt-16 lg:mt-0">
      <h1 class="text-3xl font-extrabold tracking-tight text-gray-900">{{ product.title }}</h1>

      <div class="mt-3">
        <h2 class="sr-only">Product information</h2>
        <div class="price-container">
          <span class="current-price">{{ selected_variant.price | money_without_trailing_zeros }}</span>
          {% if selected_variant.compare_at_price > selected_variant.price %}
            <span class="original-price">{{ selected_variant.compare_at_price | money_without_trailing_zeros }}</span>
            <span class="sale-label">En Oferta</span>
          {% endif %}
        </div>
      </div>

      <!-- Short description -->
      <div class="mt-6">
        <h3 class="sr-only">Description</h3>
        <div class="text-base text-gray-700">
          {{ product.metafields.custom.short_description }}
        </div>
      </div>

      <form class="mt-6" action="/cart/add" method="POST">
        <!-- Variant selector -->
        {% unless product.has_only_default_variant %}
          {% for option in product.options_with_values %}
            <div class="mt-6">
              <label for="option-{{ forloop.index }}" class="block text-sm font-medium text-gray-700">
                {{ option.name }}
              </label>
              <select id="option-{{ forloop.index }}" name="options[{{ option.name | escape }}]" class="variant-selector mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                {% for value in option.values %}
                  <option value="{{ value | escape }}"{% if option.selected_value == value %} selected="selected"{% endif %}>
                    {{ value }}
                  </option>
                {% endfor %}
              </select>
            </div>
          {% endfor %}
        {% endunless %}

        <!-- Quantity selector -->
        <div class="mt-6">
          <label for="quantity" class="block text-sm font-medium text-gray-700">Quantity</label>
          <input type="number" name="quantity" id="quantity" min="1" value="1" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
        </div>

        <input type="hidden" name="id" value="{{ selected_variant.id }}">

        <button type="submit" class="mt-6 w-full bg-indigo-600 border border-transparent rounded-md py-3 px-8 flex items-center justify-center text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          Add to cart
        </button>
      </form>

      <!-- Full description -->
      <div class="mt-10">
        <h2 class="text-sm font-medium text-gray-900">Details</h2>
        <div class="mt-4 prose prose-sm text-gray-500">
          {{ product.description }}
        </div>
      </div>
    </div>
  </div>
</div>

<div id="zoom-overlay" class="zoom-overlay">
  <button id="close-zoom" class="close-button">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
    </svg>
  </button>
  <img id="zoomed-image" class="zoomed-image" src="" alt="">
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const mainCarousel = document.getElementById('product-carousel');
    const mainCarouselItems = mainCarousel.querySelectorAll('.carousel-item');
    const mainPrevButton = document.getElementById('carousel-prev');
    const mainNextButton = document.getElementById('carousel-next');
    
    const thumbnailCarousel = document.getElementById('thumbnail-carousel');
    const thumbnailItems = thumbnailCarousel.querySelectorAll('.thumbnail-item');
    const thumbnailPrevButton = document.getElementById('thumbnail-prev');
    const thumbnailNextButton = document.getElementById('thumbnail-next');

    const variantSelectors = document.querySelectorAll('.variant-selector');
    const addToCartForm = document.querySelector('form[action="/cart/add"]');
    const variantIdInput = document.querySelector('input[name="id"]');
    const priceContainer = document.querySelector('.price-container');
    const zoomButton = document.getElementById('zoom-button');
    const zoomOverlay = document.getElementById('zoom-overlay');
    const zoomedImage = document.getElementById('zoomed-image');
    const closeZoomButton = document.getElementById('close-zoom');

    const variants = {{ product.variants | json }};
    const moneyFormat = {{ shop.money_format | json }};

    let currentIndex = 0;
    let thumbnailIndex = 0;

    function updateMainCarousel() {
      mainCarousel.style.transform = `translateX(-${currentIndex * 100}%)`;
      updateThumbnails();
    }

    function updateThumbnailCarousel() {
      thumbnailCarousel.style.transform = `translateX(-${thumbnailIndex * 25}%)`;
    }

    function updateThumbnails() {
      thumbnailItems.forEach((item, index) => {
        item.classList.toggle('active', index === currentIndex);
      });
    }

    mainPrevButton.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + mainCarouselItems.length) % mainCarouselItems.length;
      updateMainCarousel();
    });

    mainNextButton.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % mainCarouselItems.length;
      updateMainCarousel();
    });

    thumbnailPrevButton.addEventListener('click', () => {
      thumbnailIndex = Math.max(0, thumbnailIndex - 1);
      updateThumbnailCarousel();
    });

    thumbnailNextButton.addEventListener('click', () => {
      thumbnailIndex = Math.min(thumbnailItems.length - 4, thumbnailIndex + 1);
      updateThumbnailCarousel();
    });

    thumbnailItems.forEach((item, index) => {
      item.addEventListener('click', () => {
        currentIndex = index;
        updateMainCarousel();
      });
    });

    function getSelectedVariant() {
      const selectedOptions = Array.from(variantSelectors).map(select => select.value);
      return variants.find(variant => 
        JSON.stringify(variant.options) === JSON.stringify(selectedOptions)
      );
    }

    function updateVariantInfo(variant) {
      if (variant) {
        variantIdInput.value = variant.id;
        priceContainer.innerHTML = `
          <span class="current-price">${Shopify.formatMoney(variant.price, moneyFormat)}</span>
          ${variant.compare_at_price > variant.price 
            ? `<span class="original-price">${Shopify.formatMoney(variant.compare_at_price, moneyFormat)}</span>
               <span class="sale-label">En Oferta</span>`
            : ''}
        `;
        if (variant.featured_image) {
          const mediaId = variant.featured_media.id;
          const mediaIndex = Array.from(mainCarouselItems).findIndex(item => item.dataset.mediaId == mediaId);
          if (mediaIndex !== -1) {
            currentIndex = mediaIndex;
            updateMainCarousel();
          }
        }
      }
    }

    function handleVariantChange() {
      const selectedVariant = getSelectedVariant();
      updateVariantInfo(selectedVariant);
    }

    variantSelectors.forEach(selector => {
      selector.addEventListener('change', handleVariantChange);
    });

    // Zoom functionality
    function openZoom() {
      const currentImage = mainCarouselItems[currentIndex].querySelector('img');
      zoomedImage.src = currentImage.src;
      zoomedImage.alt = currentImage.alt;
      zoomOverlay.style.display = 'block';
    }

    function closeZoom() {
      zoomOverlay.style.display = 'none';
    }

    zoomButton.addEventListener('click', openZoom);
    closeZoomButton.addEventListener('click', closeZoom);
    zoomOverlay.addEventListener('click', function(event) {
      if (event.target === zoomOverlay) {
        closeZoom();
      }
    });

    // Initialize carousels
    updateMainCarousel();
    updateThumbnailCarousel();
  });
</script>