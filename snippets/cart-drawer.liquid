<div x-data="cartDrawer()"
     x-show="$store.cartDrawer.open"
     @keydown.escape.window="$store.cartDrawer.open = false"
     x-init="fetchCart()"
     x-cloak
     class="fixed inset-0 overflow-hidden z-50"
     aria-labelledby="slide-over-title" 
     role="dialog" 
     aria-modal="true">
  <div class="absolute inset-0 overflow-hidden">
    <!-- Background overlay -->
    <div x-show="$store.cartDrawer.open"
         x-transition:enter="ease-in-out duration-500"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="ease-in-out duration-500"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="absolute inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
         @click="$store.cartDrawer.open = false"
         aria-hidden="true"></div>

    <div class="pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10">
      <div x-show="$store.cartDrawer.open"
           x-transition:enter="transform transition ease-in-out duration-500 sm:duration-700"
           x-transition:enter-start="translate-x-full"
           x-transition:enter-end="translate-x-0"
           x-transition:leave="transform transition ease-in-out duration-500 sm:duration-700"
           x-transition:leave-start="translate-x-0"
           x-transition:leave-end="translate-x-full"
           class="pointer-events-auto w-screen max-w-md">
        <div class="flex h-full flex-col overflow-y-scroll bg-white shadow-xl">
          <div class="flex-1 overflow-y-auto py-6 px-4 sm:px-6">
            <div class="flex items-start justify-between">
              <h2 class="text-lg font-medium text-gray-900" id="slide-over-title">Shopping cart</h2>
              <div class="ml-3 flex h-7 items-center">
                <button @click="$store.cartDrawer.open = false" type="button" class="-m-2 p-2 text-gray-400 hover:text-gray-500">
                  <span class="sr-only">Close panel</span>
                  <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>

            <div class="mt-8">
              <div class="flow-root">
                <ul role="list" class="-my-6 divide-y divide-gray-200" id="cart-drawer-content">
                  <template x-for="item in cart.items" :key="item.key">
                    <li class="flex py-6">
                      <div class="h-24 w-24 flex-shrink-0 overflow-hidden rounded-md border border-gray-200">
                        <img :src="item.image" :alt="item.title" class="h-full w-full object-cover object-center">
                      </div>

                      <div class="ml-4 flex flex-1 flex-col">
                        <div>
                          <div class="flex justify-between text-base font-medium text-gray-900">
                            <h3 x-text="item.title"></h3>
                            <p class="ml-4" x-text="formatMoney(item.price)"></p>
                          </div>
                          <p class="mt-1 text-sm text-gray-500" x-text="item.variant_title"></p>
                        </div>
                        <div class="flex flex-1 items-end justify-between text-sm">
                          <div class="flex items-center">
                            <button @click="updateQuantity(item.key, item.quantity - 1)" class="px-2 py-1 border rounded">-</button>
                            <span x-text="item.quantity" class="mx-2"></span>
                            <button @click="updateQuantity(item.key, item.quantity + 1)" class="px-2 py-1 border rounded">+</button>
                          </div>
                          <div class="flex">
                            <button @click="removeItem(item.key)" type="button" class="font-medium text-indigo-600 hover:text-indigo-500">Remove</button>
                          </div>
                        </div>
                      </div>
                    </li>
                  </template>
                </ul>
              </div>
            </div>
          </div>

          <div class="border-t border-gray-200 py-6 px-4 sm:px-6">
            <div class="flex justify-between text-base font-medium text-gray-900">
              <p>Subtotal</p>
              <p x-text="formatMoney(cart.total_price)" id="cart-drawer-total"></p>
            </div>
            <p class="mt-0.5 text-sm text-gray-500">Shipping and taxes calculated at checkout.</p>
            <div class="mt-6">
              <a href="/cart" class="flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700">Checkout</a>
            </div>
            <div class="mt-6 flex justify-center text-center text-sm text-gray-500">
              <p>
                or
                <button @click="$store.cartDrawer.open = false" type="button" class="font-medium text-indigo-600 hover:text-indigo-500">
                  Continue Shopping
                  <span aria-hidden="true"> &rarr;</span>
                </button>
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
function cartDrawer() {
  return {
    cart: { items: [], total_price: 0 },
    fetchCart() {
      fetch('/cart.js')
        .then(response => response.json())
        .then(data => {
          this.cart = data;
          if (window.shopifyCartDrawer && window.shopifyCartDrawer.updateCartDrawerContent) {
            window.shopifyCartDrawer.updateCartDrawerContent(data);
          }
        });
    },
    updateQuantity(key, quantity) {
      if (window.shopifyCartDrawer && window.shopifyCartDrawer.updateCartItemQuantity) {
        window.shopifyCartDrawer.updateCartItemQuantity(key, quantity)
          .then(updatedCart => {
            this.cart = updatedCart;
          });
      } else {
        console.error('shopifyCartDrawer.updateCartItemQuantity is not available');
      }
    },
    removeItem(key) {
      this.updateQuantity(key, 0);
    },
    formatMoney(cents) {
      return (cents / 100).toLocaleString('en-US', {
        style: 'currency',
        currency: 'USD',
      });
    }
  }
}

document.addEventListener('alpine:init', () => {
  Alpine.store('cartDrawer', {
    open: false,
    toggle() {
      this.open = !this.open;
    }
  });
});
</script>